global
  daemon
  nbthread 4
  maxconn 256
  ulimit-n 65536
  #stats socket "$GRESTTOP"/sockets/haproxy.socket mode 0600 level admin user "$HAPROXY_SOCKET_USER"
  log stdout format raw local0
  insecure-fork-wanted
  external-check preserve-env

defaults
  mode http
  log global
  option dontlognull
  option http-ignore-probes
  option http-server-close
  option forwardfor
  # uncomment for logs with IPs:
  #log-format "%ci:%cp a:%f/%b/%s t:%Tq/%Tt %{+Q}r %ST b:%B C:%ac,%fc,%bc,%sc Q:%sq/%bq"
  # uncomment logs without IPs:
  log-format "a:%f/%b/%s t:%Tq/%Tt %{+Q}r %ST b:%B C:%ac,%fc,%bc,%sc Q:%sq/%bq"
  # uncomment to disable most of the logs, and leave basics for troubleshooting:
  #option dontlog-normal
  timeout client 30s
  timeout server 30s
  timeout connect 3s
  timeout server-fin 2s
  #timeout http-request 5s  
  #For Unimatrix (GunDB) and other web sockets:
  timeout tunnel        3600s
  timeout http-keep-alive  1s
  timeout http-request    15s
  timeout queue           30s
  timeout tarpit          60s


frontend app
  #bind 0.0.0.0:8053
  ## If using SSL, comment line above and uncomment line below
  bind 0.0.0.0:8053 ssl crt /etc/ssl/server.pem no-sslv3
  # BEGIN CORS (comment block to disable)
  http-response set-header Access-Control-Allow-Origin "*"
  http-response set-header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, JSNLog-RequestId, activityId, applicationId, applicationUserId, channelId, senderId, sessionId"
  http-response set-header Access-Control-Max-Age 3628800
  http-response set-header Access-Control-Allow-Methods "GET, DELETE, OPTIONS, POST, PUT"
  # END CORS
  compression direction response
  compression algo-res gzip
  compression type-res application/json
  option http-buffer-request
  # uncomment to log requests:
  http-request set-log-level info if TRUE
  acl srv_down nbsrv(ogmios) eq 0
  acl is_wss hdr(Upgrade) -i websocket
  http-request use-service prometheus-exporter if { path /metrics }
  http-request track-sc0 src table flood_lmt_rate
  http-request deny deny_status 429 if { sc_http_req_rate(0) gt 500 }
  use_backend stats if { path_beg /stats }
  use_backend cardano_graphql if { path_beg /cardano-graphql }
  use_backend dandelion_postgrest if { path_beg /postgrest }
  use_backend cardano_sql_postgrest if { path_beg /cardano-sql }  
  use_backend dbless_cardano_asset_registry if { path_beg /token-registry }
  use_backend unimatrix if { path_beg /unimatrix }
  use_backend ogmios if { path_beg /ogmios } || { path_beg /dashboard.js } || { path_beg /assets } || { path_beg /health } || is_wss
  use_backend koios_ogmios if { path_beg /koios/api/v1/ogmios } || { path_beg /dashboard.js } || { path_beg /assets } || { path_beg /health } || is_wss
  use_backend koios_artifacts_postgrest if { path_beg /koios }  
  # use_backend koios_lite_postgrest if { path_beg /koios-lite }
  use_backend manifest if { path_beg /manifest }  
  # use_backend submitapi if { path_beg /api/v1/submittx }    
  default_backend home


backend home
  http-request return status 200 content-type "text/html" file "/usr/local/etc/haproxy/index.html" hdr "cache-control" "no-cache"

backend manifest
  http-request return status 200 content-type "application/json" file "/usr/local/etc/haproxy/manifest.json" hdr "cache-control" "no-cache"

backend koios_lite_postgrest
  balance first
  acl grestviews path_beg -f /usr/local/etc/haproxy/grestrpcs  
  http-request set-path "%[path,regsub(^/koios-lite/api/v1/,/)]"
  http-request set-path "%[path,regsub(^/,/rpc/)]" if !grestviews !{ path_beg /rpc } !{ path -i / }
  # TODO: inject schema in postgrest headers
  server local postgrest:8050 check inter 20000 fall 1 rise 2
  #server local postgrest:"$POSTGREST_PORT" check inter 20000 fall 1 rise 2

backend koios_artifacts_postgrest
  balance first
  acl grestviews path_beg -f /usr/local/etc/haproxy/grestrpcs
  http-request set-path "%[path,regsub(^/koios/api/v1/,/rpc/)]"
  #http-request set-path "%[path,regsub(^/,/rpc/)]" if !grestviews !{ path_beg /rpc } !{ path -i / }
  # TODO: inject schema in postgrest headers
  #server local postgrest:"$POSTGREST_PORT" check inter 20000 fall 1 rise 2
  server local postgrest:8050 check inter 20000 fall 1 rise 2

backend koios_ogmios
   balance first
   http-request set-path "%[path,regsub(^/koios/api/v1/ogmios/,/)]"
   option httpchk GET /health
   http-check expect rstatus (200|202)
   default-server inter 20s fall 1 rise 2
   #server local cardano-node-ogmios:"$OGMIOS_PORT" check
   server local cardano-node-ogmios:1337 check

# backend submitapi
#   balance first
#   option httpchk POST /api/submit/tx
#   http-request set-path "%[path,regsub(^/api/v1/submittx,/api/submit/tx)]"
#   http-check expect status 415
#   default-server inter 20s fall 1 rise 2
#   server local 127.0.0.1:8090 check
#   #server koios-ssl ${KOIOS_SRV}:443 backup ssl verify none
#   http-after-response set-header Access-Control-Allow-Origin *
#   http-after-response set-header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" if has_content_type
#   http-after-response set-header Access-Control-Allow-Methods "GET, HEAD, OPTIONS, POST"
#   http-response return status 200 if METH_OPTIONS

backend ogmios
   balance first
   http-request set-path "%[path,regsub(^/ogmios/,/)]"
   option httpchk GET /health
   #http-check expect status 200
   http-check expect rstatus (200|202)
   default-server inter 20s fall 1 rise 2
   #server local cardano-node-ogmios:"$OGMIOS_PORT" check
   server local cardano-node-ogmios:1337 check

backend unimatrix
   #balance first
   balance leastconn
   http-request set-path "%[path,regsub(^/unimatrix/,/)]"
   option httpchk GET /health
   http-check expect status 200
   default-server inter 20s fall 1 rise 2
   #server local unimatrix:"$UNIMATRIX_PORT" check
   #server local unimatrix:8765 check   
   server local unimatrix:8765 maxconn 10000 weight 10 cookie local check   

backend cardano_graphql
   balance first
   http-request set-path "%[path,regsub(^/cardano-graphql/,/)]"
   option httpchk POST /
   http-check expect status 500
   default-server inter 20s fall 1 rise 2
   #server local cardano-graphql-server:"$CARDANO_GRAPHQL_SERVER_PORT" check
   server local cardano-graphql-server:3100 check

backend dbless_cardano_asset_registry
   balance first
   http-request set-path "%[path,regsub(^/token-registry/,/)]"
   option httpchk GET /
   http-check expect status 200
   default-server inter 20s fall 1 rise 2
   #server local dbless-cardano-token-registry:"$DBLESS_CARDANO_TOKEN_REGISTRY_PORT" check
   server local dbless-cardano-token-registry:3042 check

backend dandelion_postgrest
   balance first
   http-request set-path "%[path,regsub(^/postgrest/,/)]"
   option httpchk GET /
   http-check expect status 200
   default-server inter 20s fall 1 rise 2   
   #server local dandelion-postgrest:"$DANDELION_POSTGREST_PORT" check
   server local dandelion-postgrest:8060 check

backend cardano_sql_postgrest
   balance first
   http-request set-path "%[path,regsub(^/cardano-sql/,/rpc/)]"
   option httpchk GET /
   http-check expect status 200
   default-server inter 20s fall 1 rise 2   
   #server local cardano-sql-postgrest:"$CARDANO_SQL_POSTGREST_PORT" check
   server local cardano-sql-postgrest:8070 check

backend flood_lmt_rate
  stick-table type ip size 1m expire 10m store http_req_rate(10s)

backend stats
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    #stats admin if LOCALHOST
